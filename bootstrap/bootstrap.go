// Package bootstrap implements the bootstrapping logic: generation of a .go file to
// launch the actual generator and launching the generator itself.
//
// The package may be preferred to a command-line utility if generating the serializers
// from golang code is required.
package bootstrap

import (
	"fmt"
	"io/ioutil"
	"os"
	"os/exec"
	"path/filepath"
	"sort"
)

const genPackage = "github.com/stpetejess/es-mappings/gen"

type Generator struct {
	PkgPath, PkgName string
	Types            []string

	OutName string
	SkipFmt bool

	GoPath string
	Debug  bool
}

// writeMain creates a .go file that launches the generator if 'go run'.
func (g *Generator) writeMain() (path string, err error) {
	f, err := ioutil.TempFile(filepath.Dir(g.OutName), "es-mapper-bootstrap")
	if err != nil {
		fmt.Fprintln(os.Stderr, "wm")
		return "", err
	}

	fmt.Fprintln(f, "// +build ignore")
	fmt.Fprintln(f)
	fmt.Fprintln(f, "// TEMPORARY AUTOGENERATED FILE: es-mapper bootstapping code to launch")
	fmt.Fprintln(f, "// the actual generator.")
	fmt.Fprintln(f)
	fmt.Fprintln(f, "package main")
	fmt.Fprintln(f)
	fmt.Fprintln(f, "import (")
	fmt.Fprintln(f, `  "fmt"`)
	fmt.Fprintln(f, `  "os"`)
	fmt.Fprintln(f)
	fmt.Fprintf(f, "  %q\n", genPackage)
	if len(g.Types) > 0 {
		fmt.Fprintln(f)
		fmt.Fprintf(f, "  pkg %q\n", g.PkgPath)
	}
	fmt.Fprintln(f, ")")

	fmt.Fprintln(f)

	for _, t := range g.Types {
		fmt.Fprintln(f, "type ESMappings_exporter_"+t+" *pkg."+t)
	}

	fmt.Fprintln(f)
	fmt.Fprintln(f, "func main() {")
	fmt.Fprintf(f, "  g := gen.NewGenerator(%q)\n", filepath.Base(g.OutName))
	fmt.Fprintf(f, "  g.SetPkg(%q, %q)\n", g.PkgName, g.PkgPath)
	if g.SkipFmt {
		fmt.Fprintln(f, "  g.SkipFmt()")
	}
	if g.Debug {
		fmt.Fprintln(f, "  g.Debug()")
	}
	sort.Strings(g.Types)
	for _, v := range g.Types {
		fmt.Fprintln(f, "  g.Add(ESMappings_exporter_"+v+"(nil))")
	}

	fmt.Fprintln(f, "  if err := g.Run(os.Stdout); err != nil {")
	fmt.Fprintln(f, "    fmt.Fprintln(os.Stderr, err)")
	fmt.Fprintln(f, "    os.Exit(1)")
	fmt.Fprintln(f, "  }")
	fmt.Fprintln(f, "}")

	src := f.Name()
	if err := f.Close(); err != nil {
		return src, err
	}

	dest := src + ".go"
	return dest, os.Rename(src, dest)
}

func (g *Generator) Run() error {
	var f *os.File

	path, err := g.writeMain()
	if err != nil {
		return err
	}
	defer os.Remove(path)
	// tmpName := fmt.Sprintf("%v/src/%v/%v.tmp", g.GoPath, g.PkgPath, g.OutName)
	if f, err = os.Create(g.OutName + ".tmp"); err != nil { //g.OutName + ".tmp"
		return err
	}
	defer os.Remove(f.Name()) // will not remove after rename

	cmd := exec.Command("go", "run", path)
	cmd.Stdout = f
	cmd.Stderr = os.Stderr
	if err = cmd.Run(); err != nil {
		return err
	}

	f.Close()
	// outName := strings.TrimSuffix(f.Name(), ".tmp")
	return os.Rename(f.Name(), g.OutName) //g.OutName)
}
